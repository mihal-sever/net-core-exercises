DI and UnitTests

1. Внедрить DI с помощью StructureMap/Autofac. Проверить, что создание всех объектов приложения происходит через контейнер. 
2. Определить в задаче 9 классы репозитории и классы сервисы. Переименовать их согласно паттернам [...Repository] [...Service]. 
3. Проверить что бизнес логика помещена в сервисах. Провести рефакторинг для покрытия юнит тестами.
4. Написать юнит тесты, которые должны покрыть полностью бизнес логику вашего приложения:
"...
а) Приложение должно уметь - регистрировать клиента и создавать его личную карточку. В личной карточке должно быть имя и фамилия клиента, его телефон.
б) Каждый клиент продает акции на бирже. Типы акций хочется редактировать для каждого клиента. 
в) Клиент может продать акцию другому клиенту. Стоимость акций зависит от их типа. Эта сделка должна быть зафиксирована в таблице история сделок. 
г) У каждого клиента есть баланс, который изменяется при продаже/покупке акций. 
д) По наступлению нулевого баланса - клиент должен попадать в оранжевую зону. Нужно иметь возможность выбрать всех клиентов в оранжевой зоне.
е) Если наступил отрицательный баланс - клиент должен попадать в черную зону.
..."
5. Минимальное количество тестов - 6, покрытие бизнес логики должно быть 100%. Используем NSubstitute для создания Fake(Mock) экземпляров классов. 